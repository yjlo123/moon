/ *****************************
/ * A Runtime Script Intepreter
/ *****************************

let env {}       / global vars of current program
let env_stack [] / func-scoped vars of current programs
let frames []    / frame stack for all running programs
let prt_delay 5
let prt_delay_disabled 0
let sig_interrupt 0

let runtime_running 0
let key_press []

/ ====== evaluating ======
def expr
 let _expr $0
 let _original $0
 int _i $_expr
 jeq $_i $nil continue
 ret $_i
 #continue
 ife $_expr '[]'
  / 1. empty list
  ret []
 fin
 ife $_expr '{}'
  / 2. empty map
  ret {}
 fin
 pol $_expr _c1
 ife $_c1 '$'
  / 3. variable reference
  ife $_expr 'lastkey'
   pol $key_press _key
   ret $_key
  els
   cal get_var_from_env $_expr
   ret $ret
  fin
 fin
 / str is parsed as %str, due to conflict with single quote
 ife $_c1 '%'
  / 4. string
  ret $_expr
 fin
 
 ret $_original
end

def eval_param
 let _line $0
 let _idx $1
 get $_line $_idx _val
 cal expr $_val
 ret $ret
end

def push_frame
 let _frame []
 psh $_frame $env
 psh $_frame $env_stack
 psh $frames $_frame
end

def pop_frame
 pop $frames _frame
 get $_frame 0 env
 get $_frame 1 env_stack
end

def add_var_to_env
 let _name $0
 let _val $1
 get $_name 0 _c
 ife $_c '_'
  pop $env_stack _top_env
  ife $_top_env $nil
   / add to global
   put $env $_name $_val
   ret
  fin
  put $_top_env $_name $_val
  psh $env_stack $_top_env
 els
  put $env $_name $_val
 fin
end

def get_var_from_env
 let _name $0
 int _vi $_name
 jeq $_vi $nil try_local_var
 jmp local_var
 #try_local_var
 get $_name 0 _c
 jne $_c '_' global_var
  #local_var
  pop $env_stack _top_env
  ife $_top_env $nil
   / get from global
   get $env $_name _val
   ret $_val
  fin
  get $_top_env $_name _val
  psh $env_stack $_top_env
  / ife $_val $nil
  /  get $env $_name _val
  /  ret $_val
  / fin
  ret $_val
 #global_var
  get $env $_name _val
  ret $_val
end

def look_up_lbl
 let _global_lbls $0
 let _func_lbls $1
 let _func_stack $2
 let _name $3
 pop $_func_stack _func_name
 ife $_func_name $nil
  / global
  get $_global_lbls $_name _pc
  ret $_pc
 els
  get $_func_lbls $_func_name _lbls
  get $_lbls $_name _pc
  psh $_func_stack $_func_name
  ret $_pc
 fin
end

/ ** main eval **
def runtime
 let _src $0
 let _args $1
 / == env frame ==
 let env {}               / global vars
 let env_stack []         / func env
/ == end of frame ==
 let _pc_stack []         / func call pc stack
 let _func_name_stack []  / func name stack
 let _p {}
 let _lbl {}       / global labels
 let _func_lbl {}  / function local labels
 let _funcs {}     / function name -> line map
 let _pc 0         / program counter
 let runtime_running 1
 let key_press []
 / read args
 let i 0
 ife $_args $nil
 els
  for _arg $_args
    put $env $i $_arg
    add i $i 1
  nxt
 fin

 cal parse_src $_src $_p $_lbl $_func_lbl $_funcs

 let sig_interrupt 0
 
 #eval_loop
 jeq $sig_interrupt 1 eval_done
 get $_p $_pc _line
 jeq $_line $nil eval_done
 get $_line 0 _cmd
 
 ife $_cmd 'clr'
  cal eval_param $_line 1
  ife $ret $nil
   clr
  els
   clr $ret
  fin
 fin
 ife $_cmd 'prt'
  get $_line 1 _val
  cal expr $_val
  let _val $ret
  get $_line 2 _val2
  ife $prt_delay_disabled 0
   slp $prt_delay
  fin
  ife $_val2 $nil
   prt $_val
  els
   cal expr $_val2
   prt $_val $ret
  fin
 fin
 ife $_cmd 'let'
  get $_line 1 _var
  cal eval_param $_line 2
  cal add_var_to_env $_var $ret
 fin
 jeq $_cmd 'add' do_arithmetic
 jeq $_cmd 'sub' do_arithmetic
 jeq $_cmd 'mul' do_arithmetic
 jeq $_cmd 'div' do_arithmetic
 jeq $_cmd 'mod' do_arithmetic
 jmp non_arithmetic
  #do_arithmetic
  get $_line 1 _var
  cal eval_param $_line 2
  let _val1 $ret
  cal eval_param $_line 3
  let _val2 $ret
  ife $_cmd 'add'
   add _res $_val1 $_val2
  fin
  ife $_cmd 'sub'
   sub _res $_val1 $_val2
  fin
  ife $_cmd 'mul'
   mul _res $_val1 $_val2
  fin
  ife $_cmd 'div'
   div _res $_val1 $_val2
  fin
  ife $_cmd 'mod'
   mod _res $_val1 $_val2
  fin
  cal add_var_to_env $_var $_res
 #non_arithmetic
 ife $_cmd 'slp'
  cal eval_param $_line 1
  slp $ret
 fin
 ife $_cmd 'drw'
  cal eval_param $_line 1
  let _x $ret
  cal eval_param $_line 2
  let _y $ret
  cal eval_param $_line 3
  drw $_x $_y $ret
 fin
 ife $_cmd 'pxl'
  get $_line 1 _name
  cal eval_param $_line 2
  let _x $ret
  cal eval_param $_line 3
  let _y $ret
  pxl $_x $_y _val
  cal add_var_to_env $_name $_val
 fin
 ife $_cmd 'jmp'
  get $_line 1 _lbl_name
  cal look_up_lbl $_lbl $_func_lbl $_func_name_stack $_lbl_name
  let _pc $ret
 fin

 jeq $_cmd 'jeq' do_cond_jump
 jeq $_cmd 'jne' do_cond_jump
 jeq $_cmd 'jgt' do_cond_jump
 jeq $_cmd 'jlt' do_cond_jump
 jmp non_cond_jump
 #do_cond_jump
  cal eval_param $_line 1
  let _v1 $ret
  cal eval_param $_line 2
  let _v2 $ret
  get $_line 3 _lbl_name
  ife $_cmd 'jeq'
    jne $_v1 $_v2 jeq_false
    cal look_up_lbl $_lbl $_func_lbl $_func_name_stack $_lbl_name
    let _pc $ret
    #jeq_false
  fin
  ife $_cmd 'jne'
    jeq $_v1 $_v2 jne_false
    cal look_up_lbl $_lbl $_func_lbl $_func_name_stack $_lbl_name
    let _pc $ret
    #jne_false
  fin
  ife $_cmd 'jgt'
    jgt $_v1 $_v2 jgt_true
    jmp jgt_false
    #jgt_true
    cal look_up_lbl $_lbl $_func_lbl $_func_name_stack $_lbl_name
    let _pc $ret
    #jgt_false
  fin
  ife $_cmd 'jlt'
    jlt $_v1 $_v2 jlt_true
    jmp jlt_false
    #jlt_true
    cal look_up_lbl $_lbl $_func_lbl $_func_name_stack $_lbl_name
    let _pc $ret
    #jlt_false
  fin
 #non_cond_jump

 ife $_cmd 'inp'
  get $_line 1 _var
  inp _val
  cal add_var_to_env $_var $_val
 fin
 ife $_cmd 'rnd'
  get $_line 1 _name
  cal eval_param $_line 2
  let _v1 $ret
  cal eval_param $_line 3
  let _v2 $ret
  rnd _r $_v1 $_v2
  cal add_var_to_env $_name $_r
 fin
 jeq $_cmd 'int' type_cmd
 jeq $_cmd 'str' type_cmd
 jeq $_cmd 'typ' type_cmd
 jmp not_type_cmd
 #type_cmd
 get $_line 1 _var
 cal eval_param $_line 2
 ife $_cmd 'int'
  int _val $ret
 fin
 ife $_cmd 'str'
  str _val $ret
 fin
 ife $_cmd 'typ'
  typ _val $ret
 fin
 cal add_var_to_env $_var $_val
 #not_type_cmd
 ife $_cmd 'tim'
  get $_line 1 _var
  get $_line 2 _time
  tim _val $_time
  cal add_var_to_env $_var $_val
 fin
 ife $_cmd 'len'
  cal eval_param $_line 1
  let _list $ret
  get $_line 2 _name
  len $_list _len
  cal add_var_to_env $_name $_len
 fin
 ife $_cmd 'pol'
  cal eval_param $_line 1
  let _list $ret
  get $_line 2 _name
  pol $_list _first
  get $_line 1 _list_name
  pol $_list_name x
  cal add_var_to_env $_list_name $_list
  cal add_var_to_env $_name $_first
 fin
 ife $_cmd 'pop'
  cal eval_param $_line 1
  let _list $ret
  get $_line 2 _name
  pop $_list _last
  get $_line 1 _list_name
  pol $_list_name x
  cal add_var_to_env $_list_name $_list
  cal add_var_to_env $_name $_last
 fin
 ife $_cmd 'psh'
  cal eval_param $_line 1
  let _list $ret
  len $_line _line_len
  sub _line_len $_line_len 2
  for i $_line_len
    add j $i 2
    cal eval_param $_line $j
    let _val $ret
    psh $_list $_val
  nxt
  get $_line 1 _list_name
  pol $_list_name x
  cal add_var_to_env $_list_name $_list
 fin
 ife $_cmd 'put'
  cal eval_param $_line 1
  let _map $ret
  cal eval_param $_line 2
  let _key $ret
  cal eval_param $_line 3
  let _val $ret
  put $_map $_key $_val
 fin
 ife $_cmd 'get'
  cal eval_param $_line 1
  let _list $ret
  cal eval_param $_line 2
  let _key $ret
  cal eval_param $_line 3
  let _var $ret
  get $_list $_key _val
  cal add_var_to_env $_var $_val
 fin

 / ** function commands **
 ife $_cmd 'end'
  pop $env_stack _
  pop $_pc_stack _pc
  pop $_func_name_stack _
 fin
 ife $_cmd 'ret'
   get $_line 1 _res
   ife $_res $nil
    let _res_val $nil
   els
    cal eval_param $_line 1
    let _res_val $ret
   fin
   pop $env_stack _
   cal add_var_to_env 'ret' $_res_val
   pop $_pc_stack _pc
   pop $_func_name_stack _
 fin
 ife $_cmd 'def'
  / jump to func end
  get $_line 1 _func_name
  add _func_end $_func_name '$$'
  get $_funcs $_func_end _pc
 fin
 ife $_cmd 'cal'
  psh $_pc_stack $_pc
  get $_line 1 _func_name
  psh $_func_name_stack $_func_name
  get $_funcs $_func_name _pc
  let _new_frame {}
  let _i 2
  #read_args_loop
  get $_line $_i _argv
  jeq $_argv $nil read_args_finished
  sub _j $_i 2
  cal eval_param $_line $_i
  put $_new_frame $_j $ret
  add _i $_i 1
  jmp read_args_loop
  #read_args_finished 
  psh $env_stack $_new_frame
 fin
 
 / ** special **
 ife $_cmd 'led'
  cal eval_param $_line 1
  let _led_val $ret
  jeq $_led_val 0 valid_led_value
  jeq $_led_val 1 valid_led_value
  jmp led_done
  #valid_led_value
  cal set_led 2 $_led_val
  #led_done
 fin

 / ** system library **
 ife $_cmd 'lib'
  cal eval_param $_line 1
  let _lib_name $ret
  ife $_lib_name 'os.get_home_path'
   cal get_home_path
   get $_line 2 _name
   cal add_var_to_env $_name $ret
  fin
  ife $_lib_name 'os.get_current_path'
   cal lib_get_path
   get $_line 2 _name
   cal add_var_to_env $_name $ret
  fin
  ife $_lib_name 'os.set_current_path'
   cal eval_param $_line 2
   cal lib_set_path $ret
  fin
  ife $_lib_name 'os.delete_path'
   cal eval_param $_line 2
   cal lib_delete_path $ret
  fin
  ife $_lib_name 'os.make_dir'
   cal eval_param $_line 2
   let _path $ret
   cal eval_param $_line 3
   let _name $ret
   cal lib_make_dir $_path $_name
  fin
  ife $_lib_name 'os.get_file_list'
   cal eval_param $_line 2
   let _path $ret
   cal lib_get_file_list $_path
   get $_line 3 _name
   cal add_var_to_env $_name $ret
  fin
  ife $_lib_name 'os.get_file_type'
   cal eval_param $_line 2
   let _path $ret
   cal eval_param $_line 3
   let _file_name $ret
   cal lib_get_file_type $_path $_file_name
   get $_line 4 _file_type_name
   cal add_var_to_env $_file_type_name $ret
  fin
  ife $_lib_name 'os.read_file'
   cal eval_param $_line 2
   let _path $ret
   cal eval_param $_line 3
   let _file_name $ret
   cal lib_read_file $_path $_file_name
   get $_line 4 _file_content_name
   cal add_var_to_env $_file_content_name $ret
  fin
  ife $_lib_name 'os.write_file'
   cal eval_param $_line 2
   let _path $ret
   cal eval_param $_line 3
   let _file_name $ret
   cal eval_param $_line 4
   let _file_content $ret
   cal lib_write_file $_path $_file_name $_file_content
  fin
  ife $_lib_name 'os.get_os_info'
   get $_line 2 _info
   cal lib_get_os_info
   cal add_var_to_env $_info $ret
  fin
  ife $_lib_name 'os.get_sys_info'
   get $_line 2 _info
   cal lib_get_sys_info
   cal add_var_to_env $_info $ret
  fin
  ife $_lib_name 'os.execute'
   cal eval_param $_line 2
   let _file_path_and_args_str $ret
   / pack & push frame
   cal push_frame
   cal parse_input $_file_path_and_args_str
   cal run $ret
   / pop & unpack frame
   cal pop_frame
  fin
  ife $_lib_name 'util.get_path_by_str'
   cal eval_param $_line 2
   let _path_str $ret
   cal get_path_by_str $_path_str $_relative_to
   get $_line 3 _name
   cal add_var_to_env $_name $ret
  fin
  ife $_lib_name 'util.verify_path'
   cal eval_param $_line 2
   let _path $ret
   cal eval_param $_line 3
   let _is_file $ret
   cal verify_path $_path $_is_file
   get $_line 4 _name
   cal add_var_to_env $_name $ret
  fin
  ife $_lib_name 'util.get_real_path'
   cal eval_param $_line 2
   cal get_real_path $ret
   get $_line 3 _name
   cal add_var_to_env $_name $ret
  fin
  ife $_lib_name 'dev.set_led'
   cal eval_param $_line 2
   let _val $ret
   cal lib_set_led $_val
  fin
  ife $_lib_name 'term.prev_line'
   cal lib_screen_prev_line
  fin
  ife $_lib_name 'term.clear_line'
   cal lib_screen_clear_line
  fin
  ife $_lib_name 'term.reverse'
   cal lib_screen_reverse
  fin
  ife $_lib_name 'term.color_print'
   cal eval_param $_line 2
   let _text $ret
   cal eval_param $_line 3
   let _fg_color $ret
   cal eval_param $_line 4
   let _bg_color $ret
   cal lib_screen_color_print $_text $_fg_color $_bg_color
  fin
  ife $_lib_name 'term.reset'
   cal lib_screen_reset
  fin
  ife $_lib_name 'term.set_prt_delay'
   cal eval_param $_line 2
   cal lib_set_prt_delay $ret
  fin
  ife $_lib_name 'term.get_width'
   get $_line 2 _name
   cal add_var_to_env $_name $term_w
  fin
  ife $_lib_name 'term.get_height'
   get $_line 2 _name
   cal add_var_to_env $_name $term_h
  fin
  ife $_lib_name 'term.move_cursor'
   cal eval_param $_line 2
   let _dx $ret
   cal eval_param $_line 3
   let _dy $ret
   ifg $_dx 0
    for _ $_dx
     cal lib_screen_right_arrow
    nxt
   els
    mul _ndx $_dx -1
    for _ $_ndx
     cal lib_screen_left_arrow
    nxt
   fin
   ifg $_dy 0
    for _ $_dy
     cal lib_screen_down_arrow
    nxt
   els
    mul _ndy $_dy -1
    for _ $_ndy
     cal lib_screen_up_arrow
    nxt
   fin
  fin
 fin

 add _pc $_pc 1
 jmp eval_loop
 
 #eval_done
 let sig_interrupt 0
 ife $frames []
  / frame stack is empty
  let runtime_running 0
 fin
end
