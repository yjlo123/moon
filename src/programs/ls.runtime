/list directory contents
let type_map {}
put $type_map 'txt' 'TXT'
put $type_map 'exe' 'EXE'
put $type_map 'raw' 'RAW'
put $type_map 'dir' 'DIR'
put $type_map 'lnk' 'LNK'
put $type_map 'bat' 'BAT'
put $type_map $nil 'NIL'
jeq $0 $nil use_current_path
lib 'util.get_path_by_str' $0 path
jeq $path $nil print_error
jmp continue_with_path
#use_current_path
lib 'os.get_current_path' path
#continue_with_path
lib 'util.get_real_path' $path path
jeq $path $nil print_error
lib 'util.verify_path' $path 0 is_valid
jeq $is_valid 0 print_error
lib 'os.get_file_list' $path lst

len $lst lst_len
/ decide number of columns
let col 1
lib 'term.get_width' w
jeq $w $nil term_not_supported
let col 2
div col_w $w $col
add rows $lst_len 1
div rows $rows $col
#term_not_supported

let the_list []
let idx 0
let col_idx 0

#loop
jeq $idx $lst_len to_print
get $lst $idx f

lib 'os.get_file_type' $path $f file_type
let file_ent '<'
get $type_map $file_type t
add file_ent $file_ent $t
add file_ent $file_ent '> '
add file_ent $file_ent $f

jne $file_type 'lnk' not_link
add file_ent $file_ent ' -> '
lib 'os.read_file' $path $f file_content
get $file_content 0 file_meta
get $file_meta 1 link_path
add file_ent $file_ent $link_path
#not_link

get $the_list $col_idx cur_line
jne $cur_line $nil append_line
/ a new line
psh $the_list $file_ent
jmp continue
#append_line
len $cur_line cur_len
sub rest_space $col_w $cur_len
mul filler ' ' $rest_space
add temp_line $cur_line $filler
add temp_line $temp_line $file_ent
put $the_list $col_idx $temp_line

#continue
add idx $idx 1
add col_idx $col_idx 1
jne $col_idx $rows loop
let col_idx 0
jmp loop

#to_print
pol $the_list line
jeq $line $nil end
prt $line
jmp to_print

#print_error
prt 'ERR Invalid path'
jmp end
#end
