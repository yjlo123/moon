/file viewer
lib 'term.get_height' h
lib 'term.get_width' w
jeq $h $nil err_term_not_supported
sub hh $h 1

let menu_width 15

let cursor 1
let win_top 0
sub win_btm $h 2
let mode 0  / 0:file 1:book
let cur_list []
let cur_book $nil
let cur_chapter $nil
let cur_chapter_page 0
let total_chapter_page -1

jeq $0 $nil use_current_path
lib 'util.get_path_by_str' $0 path
jeq $path $nil err_invalid_path
jmp continue_with_path
#use_current_path
lib 'os.get_current_path' path
#continue_with_path
lib 'util.get_real_path' $path path
jeq $path $nil err_invalid_path
lib 'util.verify_path' $path 0 is_valid
jeq $is_valid 0 err_invalid_path


lib 'term.set_prt_delay' 0
lib 'term.alternate_buffer'


def pad_text
 let _text $0
 let _width $1
 len $_text _l
 ife $_l $_width
  / nothing need to do
  ret $_text
 fin
 #trim
 len $_text _l
 ifg $_l $_width
  pop $_text _
  jmp trim
 fin
 ife $_l $_width
  pop $_text _
  pop $_text _
  add _text $_text '..'
  ret $_text
 fin
 sub _p $_width $_l
 for _i $_p
  psh $_text ' '
 nxt
 ret $_text
end

def show_top_bar
 let _bar_left $0
 add _bar_left $_bar_left '  '
 lib 'term.color_print' $_bar_left 0 250
 let _bar_right 'q:quit  h:help  '
 ife $mode 1
  / book progress
  add _chapter_n $cursor 1
  add _bar_right $_bar_right $_chapter_n
 els
  add _bar_right $_bar_right $cursor
 fin
 add _bar_right $_bar_right '/'
 len $cur_list _l
 ife $mode 0
  sub _l $_l 1  / exclude ../
 fin
 add _bar_right $_bar_right $_l
 ife $mode 1
  ife $cur_chapter $nil
   add _bar_right $_bar_right ' 0%'
  els
   sub _page_height $h 1
   add _progress $cur_chapter_page 1
   mul _progress $_page_height $_progress
   mul _progress $_progress 100
   add _bar_right $_bar_right ' '
   len $cur_chapter _chapter_len
   div _progress $_progress $_chapter_len
   ifg $_progress 100
    add _bar_right $_bar_right 100
   els
    add _bar_right $_bar_right $_progress
   fin
   add _bar_right $_bar_right '%'
  fin
 fin
 
 len $_bar_left _left_len
 len $_bar_right _right_len
 sub _free_len $w $_left_len
 sub _free_len $_free_len $_right_len
 mul _bar_space ' ' $_free_len
 lib 'term.color_print' $_bar_space 0 250
 lib 'term.color_print' $_bar_right 0 250
end

def load_book_chapter
 let _paras $0
 sub _width $w $menu_width
 let _res []

 for _p $_paras
  lib 'util.wrap_words' $_p $_width _lines
  for _line $_lines
   psh $_res $_line
  nxt
  / paragraph spacing
  psh $_res ''
 nxt
 let cur_chapter $_res
end

def show_book_chapter_page
 add _preview_left $menu_width 1
 sub _page_h $h 1
 mul _start $_page_h $cur_chapter_page
 let _ln 2

 for _i $_page_h
  add _j $_start $_i
  get $cur_chapter $_j _line
  lib 'term.set_cursor_position' $_ln $_preview_left
  ife $_line $nil
   / end of chapter, empty lines
   prt '' ''
  els
   prt $_line ''
  fin
  add _ln $_ln 1
 nxt
end

def show_preview_content
 let _content $0
 let _type $1
 sub _width $w $menu_width
 add _preview_left $menu_width 1

 typ _t $_content
 ife $_type 'raw'
  prt $_content
  jmp preview_done
 fin
 jeq $_type 'txt' preview_list_type
 jeq $_type 'exe' preview_list_type
 jeq $_type 'bat' preview_list_type
 jeq $_type 'bok' preview_book
 jmp preview_done

 #preview_list_type
  let _line_count $h
  len $_content _fl
  ifg $_line_count $_fl
   let _line_count $_fl
  fin
  let _i 1
  let _ln 2
  #content_loop
  jeq $_i $_line_count content_done
  get $_content $_i _line
  #trim_loop
  len $_line _ll
  ifg $_ll $_width
   pop $_line _
   jmp trim_loop
  fin
  lib 'term.set_cursor_position' $_ln $_preview_left
  prt $_line ''
  add _ln $_ln 1
  add _i $_i 1
  jmp content_loop
  #content_done
  jmp preview_done

 #preview_book
  get $_content 0 _meta
  get $_meta 1 _book_intro
  let _i 0
  let _ln 2
  lib 'util.wrap_words' $_book_intro $_width _lines
  len $_lines _line_count
  #book_intro_loop
  jeq $_i $_line_count book_intro_loop_done
  lib 'term.set_cursor_position' $_ln $_preview_left
  get $_lines $_i _line
  prt $_line ''
  add _i $_i 1
  add _ln $_ln 1
  jmp book_intro_loop
  #book_intro_loop_done
  add _ln $_ln 1
  lib 'term.set_cursor_position' $_ln $_preview_left
  let _inst 'Press <Enter> to read'
  len $_inst _inst_len
  sub _space_len $_width $_inst_len
  div _space_len $_space_len 2
  mul _space ' ' $_space_len
  prt $_space ''
  prt $_inst

 #preview_done
end

def refresh
 lib 'term.clear_screen'
 ife $mode 0
  let cur_list []
  psh $cur_list '../'
  lib 'os.get_file_list' $path _file_list
  for _file $_file_list
   psh $cur_list $_file
  nxt
 fin
 ife $mode 1
  key $cur_book cur_list
 fin

 / == show top bar
 let path_str '/'
 let _i 0
 len $path _pl
 #path_loop
 jeq $_i $_pl path_loop_done
 get $path $_i _d
 add path_str $path_str $_d
 add path_str $path_str '/'
 add _i $_i 1
 jmp path_loop
 #path_loop_done
 ife $mode 0
  cal show_top_bar $path_str
 fin
 ife $mode 1
  cal show_top_bar 'BOOK'
 fin
 prt ''

 / == show file/chapter list
 len $cur_list _l
 ife $mode 0
  ife $_l 1
   / set cursor to 0 when dir is empty
   let cursor 0
  fin
 fin

 / dir list
 let _i $win_top  / file index
 #file_list_loop
 jgt $_i $win_btm file_list_done
 jeq $_i $_l file_list_done
 get $cur_list $_i _fn
 ife $mode 0
  ifg $_i 0
   / check if it is dir
   lib 'os.get_file_type' $path $_fn _ft
   ife $_ft 'dir'
    add _fn $_fn '/'
   fin
  fin
 fin
 cal pad_text $_fn $menu_width
 let _fn $ret
 ife $_i $cursor
  lib 'term.color_print' $_fn 235 255
 els
  lib 'term.color_print' $_fn 255 235
 fin
 ife $_i $win_btm
  / no new line after the last shown item
 els
  prt ''
 fin
 add _i $_i 1
 jmp file_list_loop
 #file_list_done

 / == draw remain menu space
 sub _h $h 2
 jgt $_l $_h empty_item_rows_donw
 #empty_item_row_loop
 sub _btm $h 1
 jeq $_i $_btm empty_item_rows_donw
 cal pad_text '' $menu_width
 lib 'term.color_print' $ret 255 235
 sub _btm $_btm 1
 ife $_i $_btm
 els
  prt ''
 fin
 add _i $_i 1
 jmp empty_item_row_loop
 #empty_item_rows_donw

 / == show preview
 ife $mode 0
  / preview file
  add _preview_left $menu_width 1
  lib 'term.set_cursor_position' 2 $_preview_left
  ife $cursor 0
   prt '(go to parent directory)'
  els
   get $cur_list $cursor _file
   lib 'os.get_file_type' $path $_file _ft
   jeq $_ft 'txt' preview_content
   jeq $_ft 'raw' preview_content
   jeq $_ft 'exe' preview_content
   jeq $_ft 'bat' preview_content
   jeq $_ft 'bok' preview_content
   jmp file_type_cannot_preview
   #preview_content
    lib 'os.read_file' $path $_file _fc
    cal show_preview_content $_fc $_ft
   jmp preview_done
   #file_type_cannot_preview
    prt '<' ''
    prt $_ft '>'
   #preview_done
  fin
 fin
 ife $mode 1
  ife $cur_chapter $nil
   / load book chapter
   get $cur_list $cursor _chapter
   get $cur_book $_chapter _paras
   cal load_book_chapter $_paras
   cal show_book_chapter_page
   let cur_chapter_page 0
   sub _page_height $h 1
   len $cur_chapter _cl
   div total_chapter_page $_cl $_page_height
  els
   / change book page
   cal show_book_chapter_page
  fin
 fin

 / == hide cursor on the selected item
 sub _l $cursor $win_top
 add _l $_l 2
 lib 'term.set_cursor_position' $_l $menu_width
end

/ === MAIN LOOP ===
#loop
cal refresh

lib 'term.get_key_pressed' key
ife $key 81
 / q: quit
 ife $mode 0
  jmp exit
 els
  let mode 0
  let cur_book $nil
  let cur_chapter $nil
  let cur_chapter_page 0
 fin
fin

ife $key 72
 / h: help
fin

ife $key 70
 / f
 ife $mode 1
  jeq $cur_chapter_page $total_chapter_page skip_page_down
  add cur_chapter_page $cur_chapter_page 1
 fin
 #skip_page_down
fin

ife $key 66
 / b
 ife $mode 1
  ifg $cur_chapter_page 0
   sub cur_chapter_page $cur_chapter_page 1
  fin
 fin
fin

ife $key 40
 / arrow down
 len $cur_list lst_len
 sub lst_len $lst_len 1
 jeq $cursor $lst_len skip_arrow_down
 add cursor $cursor 1
 ife $mode 1
  let cur_chapter $nil
  let cur_chapter_page 0
 fin
 ifg $cursor $win_btm
  add win_btm $win_btm 1
  add win_top $win_top 1
 fin
 #skip_arrow_down
fin
ife $key 38
 / arrow up
 ifg $cursor 0
  ife $mode 1
   let cur_chapter $nil
   let cur_chapter_page 0
  fin
  sub cursor $cursor 1
  jlt $cursor $win_top scroll_up
  jmp scroll_up_done
  #scroll_up
   sub win_btm $win_btm 1
   sub win_top $win_top 1
  #scroll_up_done
 fin
fin
ife $key 13
 / enter
 ife $mode 0
  / in file preview mode
  ife $cursor 0
   pop $path _
   let cursor 1
  els
   get $cur_list $cursor fn
   lib 'os.get_file_type' $path $fn ft
   ife $ft 'dir'
    / change directory
    psh $path $fn
    let cursor 1
    let win_top 0
    sub win_btm $h 2
   fin
   ife $ft 'bok'
    / read book
    lib 'os.read_file' $path $fn fc
    get $fc 1 fc
    let cur_book $fc
    let mode 1
    let cursor 0
   fin
  fin
 fin
fin

jmp loop


#err_term_not_supported
prt 'ERR Your current terminal is not supported'
jmp end

#err_invalid_path
prt 'ERR Invalid path'
jmp end

#exit
lib 'term.primary_buffer'
lib 'term.set_prt_delay' 1

#end
