/file viewer
lib 'term.get_height' h
lib 'term.get_width' w
jeq $h $nil err_term_not_supported
sub hh $h 1

let menu_width 15

let cursor 1
let win_top 0
sub win_btm $h 2
let cur_list []

jeq $0 $nil use_current_path
lib 'util.get_path_by_str' $0 path
jeq $path $nil err_invalid_path
jmp continue_with_path
#use_current_path
lib 'os.get_current_path' path
#continue_with_path
lib 'util.get_real_path' $path path
jeq $path $nil err_invalid_path
lib 'util.verify_path' $path 0 is_valid
jeq $is_valid 0 err_invalid_path


lib 'term.set_prt_delay' 0
lib 'term.alternate_buffer'


def pad_text
 let _text $0
 let _width $1
 len $_text _l
 sub _p $_width $_l
 for _i $_p
  psh $_text ' '
 nxt
 ret $_text
end

def show_top_bar
 let _bar_left $0
 add _bar_left $_bar_left '  '
 lib 'term.color_print' $_bar_left 0 250
 let _bar_right 'Press q to quit   '
 add _bar_right $_bar_right $cursor
 add _bar_right $_bar_right '/'
 len $cur_list _l
 add _bar_right $_bar_right $_l
 len $_bar_left _left_len
 len $_bar_right _right_len
 sub _free_len $w $_left_len
 sub _free_len $_free_len $_right_len
 mul _bar_space ' ' $_free_len
 lib 'term.color_print' $_bar_space 0 250
 lib 'term.color_print' $_bar_right 0 250
end

def show_preview_content
 let _content $0
 let _type $1
 sub _width $w $menu_width

 typ _t $_content
 ife $_type 'raw'
  prt $_content
  jmp preview_done
 fin
 jeq $_type 'txt' preview_list_type
 jeq $_type 'exe' preview_list_type
 jeq $_type 'bat' preview_list_type
 jmp preview_done
 #preview_list_type
  let _line_count $h
  len $_content _fl
  ifg $_line_count $_fl
   let _line_count $_fl
  fin
  let _i 1
  let _ln 2
  #content_loop
  jeq $_i $_line_count content_done
  get $_content $_i _line
  #trim_loop
  len $_line _ll
  ifg $_ll $_width
   pop $_line _
   jmp trim_loop
  fin
  add _preview_left $menu_width 1
  lib 'term.set_cursor_position' $_ln $_preview_left
  prt $_line ''
  add _ln $_ln 1
  add _i $_i 1
  jmp content_loop
  #content_done
 #preview_done
end

def refresh
 lib 'term.clear_screen'
 lib 'os.get_file_list' $path cur_list

 / == show top bar
 let path_str '/'
 let _i 0
 len $path _pl
 #path_loop
 jeq $_i $_pl path_loop_done
 get $path $_i _d
 add path_str $path_str $_d
 add path_str $path_str '/'
 add _i $_i 1
 jmp path_loop
 #path_loop_done
 cal show_top_bar $path_str
 prt ''

 / == show file list
 ife $cur_list []
  / set cursor to 0 when dir is empty
  let cursor 0
 fin
 / go to parent dir
 ife $win_top 0
  cal pad_text '../' $menu_width
  let go_up_text $ret
  ife $cursor 0
   lib 'term.color_print' $go_up_text 235 255
  els
   lib 'term.color_print' $go_up_text 255 235
  fin
  prt ''
 fin
 / dir list
 len $cur_list _l
 ifg $win_top 1
  sub _i $win_top 1  / file index
 els
  / _i is 0 (first item shown) when top is 0 or 1
  let _i 0
 fin
 add _j $_i 1  / cur line number
 #file_list_loop
 jeq $_j $win_btm file_list_done
 jeq $_i $_l file_list_done
 jgt $_i $_l file_list_done
 get $cur_list $_i _fn
 lib 'os.get_file_type' $path $_fn _ft
 ife $_ft 'dir'
  add _fn $_fn '/'
 fin
 cal pad_text $_fn $menu_width
 let _fn $ret
 add _j $_i 1
 ife $_j $cursor
  lib 'term.color_print' $_fn 235 255
 els
  lib 'term.color_print' $_fn 255 235
 fin
 sub _k $win_btm 1
 ife $_i $_k
  / no new line after the last shown item
 els
  prt ''
 fin
 add _i $_i 1
 jmp file_list_loop
 #file_list_done

 sub _h $h 2
 jgt $_l $_h empty_item_rows_donw
 #empty_item_row_loop
 sub _btm $h 2
 jeq $_j $_btm empty_item_rows_donw
 cal pad_text '' $menu_width
 lib 'term.color_print' $ret 255 235
 sub _btm $_btm 1
 ife $_j $_btm
 els
  prt ''
 fin
 add _j $_j 1
 jmp empty_item_row_loop
 #empty_item_rows_donw

 / == show preview
 add _preview_left $menu_width 1
 lib 'term.set_cursor_position' 2 $_preview_left
 ife $cursor 0
  prt '(go to parent directory)'
 els
  sub _j $cursor 1
  get $cur_list $_j _file
  lib 'os.get_file_type' $path $_file _ft
  jeq $_ft 'txt' preview_content
  jeq $_ft 'raw' preview_content
  jeq $_ft 'exe' preview_content
  jeq $_ft 'bat' preview_content
  jmp file_type_cannot_preview
  #preview_content
   lib 'os.read_file' $path $_file _fc
   cal show_preview_content $_fc $_ft
  jmp preview_done
  #file_type_cannot_preview
   prt '<' ''
   prt $_ft '>'
  #preview_done
 fin
 / == hide cursor on the selected item
 sub _l $cursor $win_top
 add _l $_l 2
 lib 'term.set_cursor_position' $_l $menu_width
end

/ === MAIN LOOP ===
#loop
cal refresh

lib 'term.get_key_pressed' key
jeq $key 81 exit  / q
ife $key 40
 / arrow down
 len $cur_list lst_len
 jeq $cursor $lst_len skip_arrow_down
 add cursor $cursor 1
 ifg $cursor $win_btm
  add win_btm $win_btm 1
  add win_top $win_top 1
 fin
 #skip_arrow_down
fin
ife $key 38
 / arrow up
 ifg $cursor 0
  sub cursor $cursor 1
  jlt $cursor $win_top scroll_up
  jmp scroll_up_done
  #scroll_up
   sub win_btm $win_btm 1
   sub win_top $win_top 1
  #scroll_up_done
 fin
fin
ife $key 13
 / enter
 ife $cursor 0
  pop $path _
  let cursor 1
 els
  sub cur $cursor 1  / 1st is go-up
  get $cur_list $cur fn
  lib 'os.get_file_type' $path $fn ft
  ife $ft 'dir'
   psh $path $fn
   let cursor 1
   let win_top 0
   sub win_btm $h 2
  els
   / not a dir
  fin
 fin
fin

jmp loop


#err_term_not_supported
prt 'ERR Your current terminal is not supported'
jmp end

#err_invalid_path
prt 'ERR Invalid path'
jmp end

#exit
lib 'term.primary_buffer'
lib 'term.set_prt_delay' 1

#end
