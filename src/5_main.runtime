def welcome_info
 prt 'Moon OS  v1.11'
 prt 'Copyright (c) 1992 RunTech, Inc.'
 prt 'All rights reserved.'
 prt ''
 prt 'Welcome'
end

def main
 cal get_home_path
 let path $ret

 #repl_loop
 cal get_prompt_str
 prt $ret ''
 inp in
 cal parse_input $in
 let tokens $ret
 #exec_tokens
 pol $tokens cmd

 jeq $cmd 'exit' exit

 / -- CAT --
 ife $cmd 'cat'
  pol $tokens _d
  ife $_d $nil
   cal print_error 'Invalid file name'
   jmp repl_loop
  fin

  cal get_path_by_str $_d 1
  ife $ret $nil
   cal print_error 'File not found'
   jmp repl_loop
  fin
  let _file_path $ret
  pop $_file_path _prog
  cal get_by_path $_file_path
  let file_dir $ret

  get $file_dir $_prog _file_content
  ife $_file_content $nil
   cal print_error 'File not found'
  els
   cal check_is_dir $_file_content
   ife $ret 1
    cal print_error 'Not a file'
   els
    typ file_type $_file_content
    let cat_success 0
    ife $file_type 'str'
     prt $_file_content
     let cat_success 1
    fin
    ife $file_type 'list'
     cal get_list_type $_file_content
     let _lt $ret
     ife $_lt 'exe'
      let _i 0
      for _row $_file_content
       jeq $_i 0 skip_exe_meta
       cal replace_char_in_str $_row '\n' '\\n'
       let _row $ret
       add _ln $_i ' |'
       add _row $_ln $_row
       prt $_row
       #skip_exe_meta
       add _i $_i 1
      nxt
      let cat_success 1
     fin
     ife $_lt 'txt'
      let _i 0
      for _row $_file_content
       jeq $_i 0 skip_txt_meta
       prt $_row
       #skip_txt_meta
       add _i $_i 1
      nxt
      let cat_success 1
     fin
    fin
    ife $cat_success 0
     cal print_error 'Unsupported file type.'
    fin
   fin
  fin
  jmp repl_loop
 fin

 / -- RUN --
 ife $cmd 'run'
  pol $tokens _d
  ife $_d $nil
   cal print_error 'Invalid file name'
   jmp repl_loop
  fin

  cal get_path_by_str $_d 1
  ife $ret $nil
   cal print_error 'File not found'
   jmp repl_loop
  fin
  let _prog_path $ret
  pop $_prog_path _prog
  cal get_by_path $_prog_path
  let prog_dir $ret

  get $prog_dir $_prog _file_content
  ife $_file_content $nil
   cal print_error 'File not found'
  els
   cal check_executable $_file_content
   ife $ret 1
    let _exe []
    len $_file_content _length
    sub _length $_length 1   / skip frist meta line
    for _i $_length
     add _j $_i 1
     get $_file_content $_j _line
     psh $_exe $_line
    nxt
    cal runtime $_exe $tokens
   els
    cal print_error 'File not executable'
   fin
  fin
  jmp repl_loop
 fin

 / -- EDIT --
 ife $cmd 'edit'
  pol $tokens file_name
  ife $file_name $nil
   cal print_error 'Invalid file name'
   jmp repl_loop
  fin
  cal get_current_dir
  let curr_dir $ret
  get $curr_dir $file_name fc

  / create file if not exist
  ife $fc $nil
   let file_content []
   let _file_meta []
   prt 'Create a new file?'
   prt 't:txt(default) e:exe c:<cancel>'
   inp _choice
   jeq $_choice 'c' repl_loop
   ife $_choice 'e'
    psh $_file_meta 'exe'
   els
    psh $_file_meta 'txt'
   fin
   psh $file_content $_file_meta
   put $curr_dir $file_name $file_content
   prt 'File created.'
  fin
  get $curr_dir $file_name fc

  / check file editable
  typ file_type $fc
  ife $file_type 'list'
   jmp edit_file_valid
  fin
  cal print_error 'Not an editable file'
  jmp repl_loop
  #edit_file_valid

  prt '== Edit v0.1'
  prt '== v:view a:append i:insert r:replace q:quit'
  prt '== File: ' ''
  prt $file_name ' '
  prt 'Type: ' ''
  cal get_list_type $fc
  prt $ret

  #edit_loop
  prt '#' ''
  inp edit_in
  cal parse_input $edit_in
  let edit_tokens $ret
  pol $edit_tokens edit_cmd

  jeq $edit_cmd 'q' repl_loop   / quit
  ife $edit_cmd 'v'             / view
   get $curr_dir $file_name fc
   let _i 0    / line number
   for _row $fc
    jeq $_i 0 edit_view_skip_meta
    cal replace_char_in_str $_row '\n' '\\n'
    let _row $ret
    add _ln $_i ' |'
    add _row $_ln $_row
    prt $_row
    #edit_view_skip_meta
    add _i $_i 1
   nxt
  fin
  ife $edit_cmd 'a'             / append
   pol $edit_tokens line_content
   get $curr_dir $file_name current_content
   cal replace_esc_in_str $line_content
   psh $current_content $ret
  fin
  ife $edit_cmd 'd'             / delete
   pol $edit_tokens line_number
   int line_number $line_number
   get $curr_dir $file_name current_content
   let new_content []
   let _line_count 0
   for line $current_content
    ife $_line_count $line_number
     jmp _edit_delete_continue
    fin
    psh $new_content $line
    #_edit_delete_continue
    add _line_count $_line_count 1
   nxt
   put $curr_dir $file_name $new_content
  fin
  ife $edit_cmd 'i'              / insert
   pol $edit_tokens line_number
   int line_number $line_number
   pol $edit_tokens line_content
   get $curr_dir $file_name current_content
   let new_content []
   let _line_count 0
   for line $current_content
    ife $_line_count $line_number
     cal replace_esc_in_str $line_content
     psh $new_content $ret
    fin
    psh $new_content $line
    add _line_count $_line_count 1
   nxt
   put $curr_dir $file_name $new_content
  fin
  ife $edit_cmd 'r'              / replace
   pol $edit_tokens line_number
   int line_number $line_number
   pol $edit_tokens line_content
   get $curr_dir $file_name current_content
   let new_content []
   let _line_count 0
   for line $current_content
    ife $_line_count $line_number
    cal replace_esc_in_str $line_content
     psh $new_content $ret
    els
     psh $new_content $line
    fin
    add _line_count $_line_count 1
   nxt
   put $curr_dir $file_name $new_content
  fin
  / prt 'File updated.'
  jmp edit_loop
 fin

 / -- ECHO --
 ife $cmd 'echo'
  pol $tokens s
  ife $s $nil
   let s ''
  fin
  pol $tokens p
  ife $p $nil
   prt $s
  fin
  ife $p '>'
   / write to file
   pol $tokens f
   ife $f $nil
    cal print_error 'File name missing'
   els
    cal get_current_dir
    let curr_dir $ret
    get $curr_dir $f fd
    prt $fd
    ife $fd $nil
     put $curr_dir $f $s
    els
     prt 'File/directory exists, overwrite? Y/n'
     inp ans
     jeq $ans 'y' overwrite
     jeq $ans 'Y' overwrite
     jeq $ans '' overwrite
     jmp skip_ow
     #overwrite
     put $curr_dir $f $s
     #skip_ow
    fin
   fin
  fin
  ife $p '>>'
   / append to file
   pol $tokens f
   ife $f $nil
    cal print_error 'File name missing'
    jmp repl_loop
   els
    cal get_current_dir
    let curr_dir $ret
    get $curr_dir $f fc
    ife $fc $nil
     put $curr_dir $f $s
    els
     typ _ft $fc
     ife $_ft 'str'
      add fc $fc '\n'
      add fc $fc $s
      put $curr_dir $f $fc
     els
      cal print_error 'Can only write to a raw file'
      jmp repl_loop
     fin
    fin
   fin
  fin
  jmp repl_loop
 fin

 / -- SAVE --
 ife $cmd 'save'
  sav 'moon.sav' $root
  prt '[Saved]'
  jmp repl_loop
 fin

 / -- LOAD --
 ife $cmd 'load'
  lod 'moon.sav' loaded_data
  ife $loaded_data $nil
   cal print_error 'There is no saved data'
  els
   let root $loaded_data
   prt '[Loaded]'
  fin
  jmp repl_loop
 fin

 / -- (EMPTY) --
 ife $cmd $nil
  jmp repl_loop
 fin

 / -- (ENV PROGRAM) --
 cal split_str $env_path '/'
 cal get_by_path $ret
 let _env_path_str $ret
 cal get_path_by_str $_env_path_str
 ife $ret $nil
  jmp skip_env_program
 fin
 
 let _program_dir $root
 for _d $ret
  get $_program_dir $_d _program_dir
 nxt
 let _has_program 0
 for _p $_program_dir
  ife $_p $cmd
   let _has_program 1
  fin
 nxt
 ife $_has_program 1
  let _new_tokens []
  psh $_new_tokens 'run'
  add _prog_path $_env_path_str '/'
  add _prog_path $_prog_path $cmd
  psh $_new_tokens $_prog_path
  for t $tokens
   psh $_new_tokens $t
  nxt
  let tokens $_new_tokens
  jmp exec_tokens
 fin
 #skip_env_program

 / -- (INVALID) --
 add err_msg 'Unknown command: ' $cmd
 cal print_error $err_msg
 jmp repl_loop

 #exit
 prt 'Shutting down...'
end

cal welcome_info
cal main
